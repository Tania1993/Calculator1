import javafx.util.Pair;
import java.io.*;
import java.util.*;

interface Command{
   int command(String str) throws IOException;
}

interface Operator{
    int operator(Pair<Command, String> lhs, Pair<Command, String> rhs) throws Exception;
}

class Interpretator{
    public static final String homePath = System.getProperty("user.home");
    private PrintWriter out = new PrintWriter(System.out, true);
    private PrintWriter err = new PrintWriter(System.err, true);

    private File currDir = new File(".");
    private Map<String, String> vars = new HashMap<>();

    public void run(String str) throws Exception{
        Parser parser = new Parser();
        for(Pair<Command, String> pair : parser.parse(str)) {
            Command cmd = pair.getKey();
            String param = pair.getValue();
            cmd.command(param);
        }
    }

    private class Parser {
        public List<Pair<Command, String>> parse(String str) {
            str = parseVars(str);
            str = substituteVars(str);
            List<Pair<Command, String>> list = new ArrayList<Pair<Command, String>>();

            for (String args : str.split(" && ")) {
                for (String arg : args.split(" \\| ")){
                    Pair<Command, String> pair = parseCommand(arg);
                    if (pair != null)
                        list.add(pair);
                }
            }
            return list;
        }

        public String parseVars(String str) {
            for(String s : str.split(" ")){
                if(s.contains("=")){
                    vars.put(s.substring(0, s.indexOf("=")), s.substring(s.indexOf("=") + 1));
                    str = str.replace(s, "");
                }
            }
            return str;
        }

        public String substituteVars(String str) {
            for (String s : str.split(" ")) {
                if (s.startsWith("$")) {
                    String value = vars.get(s.substring(1));
                    str = (value == null) ? str : str.replace(s, value);
                }
            }
            return str;
        }

        public Pair<Command, String> parseCommand(String str) {
            String[] args = str.split(" ", 2);

            String c = args[0];
            String param = args.length == 2 ? args[1] : null;
            Command cmd = new CommandFactory().newInstance(c);
            if (cmd == null)
                return null;
            return new Pair<>(cmd, param);
        }
    }

    class LS implements Command{
        public int command(String str){
            File file = (str == null) ? currDir : new File(str);
            if (file.isDirectory()) {
                for (String name : file.list())
                    out.println(name);
            }
            else
                out.println(file.getName());
            return 0;
        }
    }

    class CD implements Command{
        public int command(String str){
            if (str == null) {
                currDir = new File(homePath);
                return 0;
            }
            File dir = str.startsWith("/") ? new File(str) : new File(currDir, str);
            if (!dir.exists()) {
                err.println("cd: " + dir.getName() + ": not found");
                return 1;
            }
            if (!dir.isDirectory()) {
                err.println("cd: " + dir.getName() + ": isn`t a directory");
                return 2;
            }
            currDir = dir;
            return 0;
        }
    }

    class PWD implements Command{
        public int command(String str){
            out.println(currDir.getAbsolutePath());
            return 0;
        }
    }

    class Tail implements Command{
        public int command(String str) throws IOException{
            File file = new File(str);
            if (!file.isFile()) {
                err.println("Tail: " + file.getName() + ": isn`t a file");
                return 1;
            }

            Scanner in = new Scanner(file);
            List<String> lines = new ArrayList<String>();
            while(in.hasNextLine()){
                if (lines.size() >= 10)
                    lines.remove(0);
                lines.add(in.nextLine());
            }
            for (String s : lines)
                out.println(s);
            in.close();
            return 0;
        }
    }

    class Head implements Command{
        public int command(String str) throws IOException{
            File file = new File(str);
            if (!file.isFile()) {
                err.println("Head: " + file.getName() + ": isn`t a file");
                return 1;
            }

            Scanner in = new Scanner(file);
            for (int i = 0; i < 10 && in.hasNextLine(); i++)
                out.println(in.nextLine());
            in.close();
            return 0;
        }
    }

    class DU implements Command{
        public int command(String str) throws IOException{
            File dir = (str == null) ? currDir : new File(currDir, str);
            if (!dir.exists()) {
                err.println("df: " + dir.getName() + ": isn`t exists");
                return 1;
            }
            sizeDirectory(dir);
            return 0;
        }

        long sizeDirectory(File dir) {
            long size = dir.length();
            for (File file : dir.listFiles()) {
                if (file.isFile())
                    size += file.length();
                else {
                    size += sizeDirectory(file);
                }
            }
            out.printf("%-10d %s\n", size, dir.getAbsolutePath());
            return size;
        }
    }

    class DF implements Command {
        public int command(String str) throws IOException {
            File dir = (str == null) ? currDir : new File(currDir, str);
            if (!dir.exists()) {
                err.println("df: " + dir.getName() + ": is not exist");
                return 1;
            }
            out.println("Used space is " + dir.getUsableSpace() + ", capacity space is " + dir.getTotalSpace());
            return 0;
        }
    }

    class Grep implements Command{
        public int command(String str) throws IOException{
            Scanner in = new Scanner(new File(str));

            while (in.hasNextLine()) {
                String line = in.nextLine();
                if (line.contains(str))
                    System.out.println(line);
            }
            in.close();
            return 0;
        }
    }

    class PipeCommands implements Operator{
        public int operator(Pair<Command, String> left, Pair<Command, String> right){
            Command lCmd = left.getKey();
            Command rCmd = right.getKey();

            return 0;
        }
    }

    class UnionCommands implements Operator {
        public int operator(Pair<Command, String> left, Pair<Command, String> right) throws Exception {
            Command leftCmd = left.getKey();
            String leftParam = left.getValue();
            Command rightCmd = right.getKey();
            String rightParam = right.getValue();
            int result = leftCmd.command(leftParam);
            if (result == 0)
                return rightCmd.command(rightParam);
            return result;
        }
    }

    class CommandFactory{
        public Command newInstance (String str){
            Command object = null;
            switch (str.toLowerCase()){
                case "ls": object = new LS(); break;
                case "cd": object = new CD(); break;
                case "pwd": object = new PWD(); break;
                case "tail": object = new Tail(); break;
                case "head": object = new Head(); break;
                case "du": object = new DU(); break;
                case "df": object = new DF(); break;
                case "grep": object = new Grep(); break;
                default:

            }
            return object;
        }
    }
}



public class Task5 {
    public  static void main(String [] args) throws Exception{
        String str = new String();
        Scanner in = new Scanner(System.in);
        Interpretator inter = new Interpretator();

        String username = System.getProperty("user.name");
        System.out.print(username + ": ");
        while (in.hasNextLine()) {
            inter.run(in.nextLine());
            System.out.print(username + ": ");
        }
    }
}

